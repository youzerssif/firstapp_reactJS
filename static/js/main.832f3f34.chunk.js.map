{"version":3,"sources":["Table.js","Form.js","Api.js","App.js","reportWebVitals.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","Api","data","fetch","then","result","json","entry","App","characters","filter","character","i","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAGMA,EAAc,WAElB,OACE,gCACE,+BACE,sCACA,2CAMFC,EAAY,SAACC,GAEjB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,+BACE,6BAAKD,EAAIE,OACT,6BAAKF,EAAIG,MACT,6BACE,wBAAQC,QAAS,kBAAMR,EAAMS,gBAAgBJ,IAA7C,wBAJKA,MAab,OAAO,gCAAQJ,KA8CFS,EA1CC,SAACV,GAAW,IACjBE,EAAmCF,EAAnCE,cAAeO,EAAoBT,EAApBS,gBAEtB,OACE,kCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAWP,cAAeA,EAAeO,gBAAiBA,Q,OCMnDE,E,4MA7CbC,aAAe,CACbN,KAAM,GACNC,IAAK,I,EAGPM,MAAQ,EAAKD,a,EAEbE,aAAe,SAACC,GAAW,IAAD,EACFA,EAAMC,OAArBV,EADiB,EACjBA,KAAMW,EADW,EACXA,MAEb,EAAKC,SAAL,eACGZ,EAAOW,K,EAIZE,WAAa,WACX,EAAKnB,MAAMoB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,4CAGrB,WAAU,IAAD,EACeS,KAAKR,MAAnBP,EADD,EACCA,KAAMC,EADP,EACOA,IAEd,OACE,iCACE,uBAAOe,QAAQ,OAAf,kBACA,uBACEC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHP,MAAOX,EACPmB,SAAUJ,KAAKP,eACjB,uBAAOQ,QAAQ,MAAf,iBACA,uBACEC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAAOV,EACPkB,SAAUJ,KAAKP,eACf,uBAAOS,KAAK,SAASN,MAAM,SAAST,QAASa,KAAKF,oB,GAxCzCO,aC8BJC,E,4MA7Bbd,MAAQ,CACNe,KAAM,I,uDAIR,WAAqB,IAAD,OAIlBC,MAFE,kGAGCC,MAAK,SAACC,GAAD,OAAYA,EAAOC,UACxBF,MAAK,SAACC,GACL,EAAKb,SAAS,CACZU,KAAMG,S,oBAKd,WAAU,IAGFA,EAFSV,KAAKR,MAAbe,KAEazB,KAAI,SAAC8B,EAAO5B,GAC9B,OAAO,6BAAiB4B,GAAR5B,MAGlB,OAAO,6BAAK0B,Q,GA1BEL,aC6CHQ,E,4MAnCbrB,MAAQ,CACNsB,WAAY,I,EAEd1B,gBAAkB,SAACJ,GAAW,IACrB8B,EAAc,EAAKtB,MAAnBsB,WAEP,EAAKjB,SAAS,CACZiB,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAMjC,Q,EAKnBe,aAAe,SAACiB,GACd,EAAKnB,SAAS,CAACiB,WAAW,GAAD,mBAAM,EAAKtB,MAAMsB,YAAjB,CAA6BE,O,4CAGxD,WAAU,IAEAF,EAAed,KAAKR,MAApBsB,WAER,OACE,sBAAKI,UAAU,MAAf,UACE,+CACA,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAAOrC,cAAeiC,EAAY1B,gBAAiBY,KAAKZ,kBACxD,cAAC,EAAD,CAAMW,aAAcC,KAAKD,eACzB,cAAC,EAAD,c,GA7BQM,aCEHc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.832f3f34.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\n\r\nconst TableHeader = () =>{\r\n\r\n  return(\r\n    <thead>\r\n      <tr>\r\n        <th>Name</th>\r\n        <th>Job</th>\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\nconst TableBody = (props) =>{\r\n\r\n  const rows = props.characterData.map((row, index) =>{\r\n    return (\r\n      <tr key={index}>\r\n        <td>{row.name}</td>\r\n        <td>{row.job}</td>\r\n        <td>\r\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\r\n        </td>\r\n        {/* <td>\r\n          <button onClick={() => props.addElement(index)}>Add</button>\r\n        </td> */}\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return <tbody>{rows}</tbody>\r\n  }\r\n \r\n\r\n  const Table = (props) => {\r\n    const {characterData, removeCharacter,} = props\r\n  \r\n    return (\r\n      <table>\r\n        <TableHeader />\r\n        <TableBody characterData={characterData} removeCharacter={removeCharacter} />\r\n      </table>\r\n    )\r\n  }\r\n\r\n// class Table extends Component {\r\n//   render() {\r\n    \r\n//     // const {characterData} = this.props\r\n//     const characters =[\r\n//       {\r\n//         name: 'Charlie',\r\n//         job: 'Janitor',\r\n//       },\r\n//       {\r\n//         name: 'Mac',\r\n//         job: 'Bouncer',\r\n//       },\r\n//       {\r\n//         name: 'Dee',\r\n//         job: 'Aspring actress',\r\n//       },\r\n//       {\r\n//         name: 'Dennis',\r\n//         job: 'Bartender',\r\n//       },\r\n//     ]\r\n//     return (\r\n//       <table>\r\n//         <TableHeader />\r\n//         <TableBody characterData={characters} />\r\n//       </table>\r\n//     )\r\n//   }\r\n// }\r\n\r\nexport default Table","import React, {Component} from 'react'\r\n\r\nclass Form extends Component {\r\n  initialState = {\r\n    name: '',\r\n    job: '',\r\n  }\r\n\r\n  state = this.initialState\r\n\r\n  handleChange = (event) => {\r\n    const {name, value} = event.target\r\n  \r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  submitForm = () => {\r\n    this.props.handleSubmit(this.state)\r\n    this.setState(this.initialState)\r\n  }\r\n\r\n  render() {\r\n    const { name, job } = this.state;\r\n  \r\n    return (\r\n      <form>\r\n        <label htmlFor=\"name\">Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          id=\"name\"\r\n          value={name}\r\n          onChange={this.handleChange} />\r\n        <label htmlFor=\"job\">Job</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"job\"\r\n          id=\"job\"\r\n          value={job}\r\n          onChange={this.handleChange} />\r\n          <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react'\r\n\r\nclass Api extends Component {\r\n  state = {\r\n    data: [],\r\n  }\r\n\r\n  // Code is invoked after the component is mounted/inserted into the DOM tree.\r\n  componentDidMount() {\r\n    const url =\r\n      'https://en.wikipedia.org/w/api.php?action=opensearch&search=Seona+Dancing&format=json&origin=*'\r\n\r\n    fetch(url)\r\n      .then((result) => result.json())\r\n      .then((result) => {\r\n        this.setState({\r\n          data: result,\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const {data} = this.state\r\n\r\n    const result = data.map((entry, index) => {\r\n      return <li key={index}>{entry}</li>\r\n    })\r\n\r\n    return <ul>{result}</ul>\r\n  }\r\n}\r\n\r\nexport default Api","// import logo from './logo.svg';\nimport './App.css';\nimport Table from './Table';\nimport Form from './Form';\nimport Api from './Api';\nimport { Component } from 'react';\n\n\n\n\nclass App extends Component {\n\n  state = {\n    characters: [],\n  }\n  removeCharacter = (index) => {\n    const {characters} = this.state\n  \n    this.setState({\n      characters: characters.filter((character, i) => {\n        return i !== index\n      }),\n    })\n  }\n\n  handleSubmit = (character) => {\n    this.setState({characters: [...this.state.characters, character]})\n  }\n\n  render() {\n\n    const { characters } = this.state\n\n    return (\n      <div className=\"App\">\n        <h1>Hello, React!</h1>\n        <div className=\"container\">\n          <Table characterData={characters} removeCharacter={this.removeCharacter} />\n          <Form handleSubmit={this.handleSubmit} />\n          <Api />\n        </div>\n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Table from './Table';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}